import logging
from random import choice

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from environs import Env

import markups as nav
from db_queries import check_executor_api, get_orders_api, push_order_api, get_rate_api, get_inwork_orders_api, end_order_api
from db_queries import check_executors, get_orders, push_order, get_rate, get_inwork_orders, end_order

env = Env()
env.read_env()
token = env('TELEGRAM_BOT_TOKEN')
token2 = env('CLIENT_TELEGRAM_TOKEN')

bot = Bot(token=token)
bot2 = Bot(token=token2)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    comment_to_client = State()  # Will be represented in storage as 'Form:comment_to_client'
    estimate = State() # Will be represented in storage as 'Form:estimate'


# -- Start bot --
@dp.message_handler(commands=['start'])
async def check_auth(message: types.Message):
    username = message.from_user['username']
    print(message.from_user)
    flag, executor_id = check_executor_api(username, login, password, server_url)
    if flag:
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}\n\n'
                               'üöß –î–∞–Ω–Ω—ã–π –±–æ—Ç ü§ñ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–∞–∫ –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ –±—ã–ª–∏ '
                               '–Ω–∞–π–¥–µ–Ω—ã —Å—Ä–µ–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üöß,\n'
                               '–ù–û, –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤—ã —Ç–æ–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ...',
                               reply_markup=nav.payment_menu)

    else:
        executor_tg_id = message.from_user.id
        await bot.send_message(executor_tg_id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n'
                                                    '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –µ—Å—Ç—å –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤–∞—Å\n'
                                                    'üíª –ö–∞–∫ –Ω–∞—Å—á—ë—Ç –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å?', reply_markup=nav.worker_menu)
        approved_order.update({'executor_tg_id': executor_tg_id, 'executor_id': executor_id})


# -- All message handlers
@dp.message_handler()
async def worker_routine(message: types.Message):
    if message.text == 'üìë –í—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑':
        # all_orders.clear()
        # all_orders.extend(get_orders_api(login, password, server_url))
        all_orders = (get_orders_api(login, password, server_url))
        print(f'—Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ {all_orders}')
        if not all_orders:
            await bot.send_message(message.from_user.id, text='–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –≤—Å—ë-—Ç–∞–∫–∏ –Ω–µ—Ç.\n'
                                                              '<i>"–ù—É, –Ω–∏—á–µ–≥–æ, –º—ã —É–≤–µ—Ä–µ–Ω—ã, –æ–Ω–∏ –≤–æ—Ç-–≤–æ—Ç –ø–æ—è–≤—è—Ç—Å—è"</i>',
                                   parse_mode='HTML', reply_markup=nav.worker_menu)
        else:
            chosen_order = choice(all_orders)
            await bot.send_message(message.from_user.id, text=f'–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä {chosen_order["id"]}\n'
                                                              f'<i>"{chosen_order["text"]}"</i>',
                                   parse_mode='HTML', reply_markup=nav.choice_menu)
            approved_order.update({'client_tg_id': int(chosen_order['client_tg_id']),
                                   'order_id': chosen_order['id'],
                                   'credentials': chosen_order['credentials']})
    elif message.text == 'üëå –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É':
        if approved_order['credentials']:
            keys = approved_order['credentials']
        else:
            keys = '–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç,\n–Ω–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∏—Ö —É –∑–∞–∫–∞–∑—á–∏–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
        await bot.send_message(message.from_user.id, '‚ö†–í—ã –≤–∑—è–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑!‚ö†\n\n'
                                                     f'üîë<b>–ö–ª—é—á–∏ –æ—Ç –∞–¥–º–∏–Ω–∫–∏:</b>\n<i>{keys}</i>\n\n'
                                                     '–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏! üëç', parse_mode='HTML', reply_markup=nav.worker_menu)
        approved_order.update({'is_taken': True})
        push_order_api(login, password, server_url, approved_order)
        print('–∑–∞–∫–∞–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ —é–∑–µ—Ä–æ–º', approved_order, sep='\n')

    elif message.text == 'üëà –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚ùó',
                               reply_markup=nav.worker_menu)

        print('–ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', approved_order, sep='\n')
    elif message.text == '‚ùì –ß–∞–í–æ':
        await bot.send_message(message.from_user.id, '–ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–æ–º?',
                               reply_markup=nav.qna_menu)
    elif message.text == 'üèÜ –°–¥–∞—Ç—å –∑–∞–∫–∞–∑':
        user_id = message.from_user.id
        inwork_orders = get_inwork_orders_api(login, password, server_url, user_id)
        print(f'–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ —Ä–∞–±–æ—Ç–µ —É –≤–∞—Å –∑–∞–∫–∞–∑ {inwork_orders}')
        if inwork_orders:
            await bot.send_message(message.from_user.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –≤ —Ä–∞–±–æ—Ç–µ:\n')
            for order in inwork_orders:
                await bot.send_message(message.from_user.id, f'<b>–∑–∞–∫–∞–∑ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º:</b> {order["id"]}\n'
                                                            f'<b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b> {order["text"]}',
                                    parse_mode='HTML',
                                    reply_markup=nav.work_end_menu)
            approved_order.update({'end_order_id': inwork_orders[0]["id"]})
        else:
            await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤  –≤ —Ä–∞–±–æ—Ç–µ",
                                   parse_mode='HTML',
                                   reply_markup=nav.worker_menu)

    elif message.text == 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑':
        await bot.send_message(message.from_user.id, '–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –Ω–µ —Ç–∞–∫, –º—ã –≥–¥–µ —Ç—ã –∂–∏–≤—ë—à—å ‚ùó',
                               reply_markup=nav.worker_menu)
        end_order_api(login, password, server_url, approved_order)


@dp.callback_query_handler(text='salary_btn')
async def comment_to_client(message: types.Message):
    rate = get_rate_api(login, password, server_url)
    await bot.send_message(message.from_user.id, "üí∏ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ 1–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n\n"
                                                 f"<b>{rate}—Ä.</b>",
                           parse_mode='HTML')


@dp.callback_query_handler(text='how_to_use')
async def comment_to_client(message: types.Message):
    await bot.send_message(message.from_user.id, '- –ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìë <b>–í—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑</b>" - –¥–ª—è –≤–∞—Å –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –∑–∞—è–≤–∫–∞\n'
                                                 '- –ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìñ <b>–í —Ä–∞–±–æ—Ç–µ</b>" –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤',
                           parse_mode='HTML')


# -- Take-Order InlineButton
@dp.callback_query_handler(text='take_order')
async def take_order(message: types.Message):
    await bot.send_message(message.from_user.id, f'–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n'
                           '‚è± –ù–∞–ø–∏—à–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n',
                           reply_markup=nav.worker_menu)
    await Form.estimate.set()


@dp.message_handler(content_types=['text'], state=Form.estimate)
async def worker_routine(message: types.Message, state: FSMContext):
    logging.warning('worker_routine func!')
    async with state.proxy():
        await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å <b>"üëå –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"</b>'
                                                     ' –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –≤–∞–º–∏ –∏ –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å.'
                                                     ' –ò–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ <b>"üëà –í–µ—Ä–Ω—É—Ç—å—Å—è"</b> –≤ –º–µ–Ω—é',
                               parse_mode='HTML', reply_markup=nav.worker_begining_menu)
        approved_order.update({'estimate': message.text})
    await state.finish()


# -- Refuse to Take-Order InlineButton
@dp.callback_query_handler(text='no_take_order')
async def no_take_order(callback: types.CallbackQuery):
    await callback.message.delete()
    print(f'–æ—Ç–∫–∞–∑ –æ—Ç –∑–∞–∫–∞–∑–∞ {approved_order}')


# -- comment to client InlineButton
@dp.callback_query_handler(text='comment_to')
async def comment_to_client(message: types.Message):
    await bot.send_message(message.from_user.id, "üí¨ –í–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É")
    await Form.comment_to_client.set()


@dp.message_handler(content_types=['text'], state=Form.comment_to_client)
async def worker_comment(message: types.Message, state: FSMContext):
    logging.warning('worker_comment func!')
    async with state.proxy():
        client_tg_id = approved_order['client_tg_id']
        await bot2.send_message(client_tg_id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –≤–∑—è—Ç—å—Å—è –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É, '
                                          '–Ω–æ —É –Ω–µ–≥–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n'
                                          '‚ùì <b>–í–æ–ø—Ä–æ—Å –∑–≤—É—á–∏—Ç —Ç–∞–∫:</b>\n'
                                          f'<i>"{message.text}"</i>\n\n'
                                          '–û—Ç–≤–µ—Ç–∏—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∏–∂–µ',
                               parse_mode='HTML', reply_markup=nav.answer_menu)
        await bot.send_message(message.from_user.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É...')
    await state.finish()


if __name__ == '__main__':
    login = env('LOGIN')
    password = env('PASSWORD')
    server_url = env('SERVER_URL')
    db_filename = env('DB_FILENAME')
    client_bot_token = env('CLIENT_TELEGRAM_TOKEN')
    approved_order = {}

    executor.start_polling(dp, skip_updates=True)
